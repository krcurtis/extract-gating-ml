--------------------------------------------------------------------------------
--- Copyright 2022 Keith Curtis
--- Copyright 2022 Fred Hutchinson Cancer Center
--- Generate XML for GatingML structures

{-# LANGUAGE RecordWildCards #-}

{-

gating:PolygonGate gating:id="Non-Basophils" gating:parent_id="Singlets"


gating:dimension gating:min="3.06371" gating:max="6.42382" gating:compensation-ref="uncompensated" gating:transformation-ref="ArcSinhScale_5_-5_12000"
data-type:fcs-dimension data-type:name="Nd148Di"/


gating:vertex
 <gating:coordinate data-type:value="-0.440932"/>
 <gating:coordinate data-type:value="-0.193526"/>
</gating:vertex>


<gating:RectangleGate gating:id="FSC_Range_Gate">
<gating:dimension
gating:min="10" gating:max="20" gating:compensation-ref="uncompensated">
<data-type:fcs-dimension data-type:name="FSC-H" />
</gating:dimension>
</gating:RectangleGate>


-}

module GatingML2XML where

import Text.XML.Light
import Text.XML.Light.Output

import Data.Maybe (isNothing)
import qualified Data.Text as T
import qualified Data.List as L

--------------------------------------------------------------------------------

import GatingML


pp = useShortEmptyTags (const False) defaultConfigPP


simple_name :: String -> Text.XML.Light.QName
simple_name s = QName s Nothing Nothing

xsi = Attr (simple_name "xmlns:xsi") "http://www.w3.org/2001/XMLSchema-instance"
gating = Attr (simple_name "xmlns:gating") "http://www.isac-net.org/std/Gating-ML/v2.0/gating"
transforms = Attr (simple_name "xmlns:transforms") "http://www.isac-net.org/std/Gating-ML/v2.0/transformations"
datatype = Attr (simple_name "xmlns:data-type") "http://www.isac-net.org/std/Gating-ML/v2.0/datatypes"
schema_location = Attr (simple_name "xsi:schemaLocation") (L.intercalate " "  [ "http://www.isac-net.org/std/Gating-ML/v2.0/gating ../XSD/Gating-ML.v2.0.xsd"
                                                                            , "http://www.isac-net.org/std/Gating-ML/v2.0/transformations ../XSD/Transformations.v2.0.xsd"
                                                                            , "http://www.isac-net.org/std/Gating-ML/v2.0/datatypes ../XSD/DataTypes.v2.0.xsd"])

custom_info = Element { elName = unqual "data-type:custom_info"
                          , elAttribs = [ ]
                          , elContent = [ Text (CData CDataText "Gating-ML generated by extract-gating-ml" Nothing) ]
                          , elLine = Nothing
                          }

top_gatingml = Element { elName = unqual "gating:Gating-ML"
                          , elAttribs = [ xsi, gating, transforms, datatype, schema_location]
                          , elContent = []
                          , elLine = Nothing
                          }


gating_dimension :: GatingDimension -> Element
gating_dimension GatingDimension{..} = full_element
  where

    --TODO handle transform reference?

    channel_attribute = Attr (simple_name "data_type:name") (T.unpack gd_name)
    dim_element = Element { elName = unqual "data-type:fcs-dimension"
                          , elAttribs = [ channel_attribute ]
                          , elContent = []
                          , elLine = Nothing
                          }

    attributes' = case gd_minimum of
                    Nothing -> []
                    Just minval -> [Attr (simple_name "gating:min") (show minval)]
    attributes'' = case gd_maximum of
                     Nothing -> attributes'
                     Just maxval -> attributes' ++ [Attr (simple_name "gating:max") (show maxval)]

    compensation_attribute = case gd_compensation_ref of
                               Nothing -> Attr (simple_name "gating:compensation-ref") "uncompensated"
                               Just x  -> Attr (simple_name "gating:compensation-ref") (T.unpack x)
    attributes = attributes'' ++ [compensation_attribute]
    
    full_element = Element { elName = unqual "gating:dimension"
                           , elAttribs = attributes
                           , elContent = [ Elem dim_element]
                           , elLine = Nothing
                           }

gating_vertex :: (Double, Double) -> Element
gating_vertex (x,y) = full_element
  where
    x_element = Element { elName = unqual "gating:coordinate"
                        , elAttribs = [Attr (simple_name "data-type:value") (show x)]
                        , elContent = []
                        , elLine = Nothing
                        }
    y_element = Element { elName = unqual "gating:coordinate"
                        , elAttribs = [Attr (simple_name "data-type:value") (show y)]
                        , elContent = []
                        , elLine = Nothing
                        }
    full_element = Element { elName = unqual "gating:vertex"
                           , elAttribs = []
                           , elContent = [ Elem x_element, Elem y_element]
                           , elLine = Nothing
                           }


out_example = putStrLn $ ppcTopElement pp
                $ custom_info






-- this could be 1, 2, 3, or more ranges together, but implement 2D version for now
to_gate_element :: Gate -> Element
to_gate_element RectangleGate{..} = full_element
  where
    gate_id_attribute = Attr (simple_name "gating:id") (T.unpack rg_id)
    attributes = case rg_parent_id of
                   Nothing -> [gate_id_attribute]
                   Just x -> [gate_id_attribute, Attr (simple_name "gating:parent_id") (T.unpack x)]
    full_element = Element { elName = unqual "gating:RectangleGate"
                          , elAttribs = attributes
                          , elContent = [ Elem (gating_dimension rg_x_dim), Elem (gating_dimension rg_y_dim)]
                          , elLine = Nothing
                          }
to_gate_element PolygonGate{..} = full_element
  where
    gate_id_attribute = Attr (simple_name "gating:id") (T.unpack pg_id)
    attributes = case pg_parent_id of
                   Nothing -> [gate_id_attribute]
                   Just x -> [gate_id_attribute, Attr (simple_name "gating:parent_id") (T.unpack x)]
    full_element = Element { elName = unqual "gating:PolygonGate"
                          , elAttribs = attributes
                          , elContent = [ Elem (gating_dimension pg_x_dim), Elem (gating_dimension pg_y_dim)] ++ map (Elem . gating_vertex) pg_points
                          , elLine = Nothing
                          }


to_xml :: [Gate] -> Element
to_xml gates = top
  where
    top = Element { elName = unqual "gating:Gating-ML"
                          , elAttribs = [ xsi, gating, transforms, datatype, schema_location]
                          , elContent = map (Elem . to_gate_element)  gates
                          , elLine = Nothing
                          }

xml_to_file :: String -> Element -> IO ()
xml_to_file filename root = do
  writeFile filename (ppTopElement root)

  
